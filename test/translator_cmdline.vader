Include: default_config.vader


Execute (Parsing '-w word'):
  let cmd = '-w word'
  let [argobj, code] =translator#cmdline#parse_args(cmd)
  AssertEqual v:true, code
  AssertEqual 'word', argobj.word
  AssertEqual g:translator_default_engines, argobj.engines
  AssertEqual g:translator_source_lang, argobj.source_lang
  AssertEqual g:translator_target_lang, argobj.target_lang


Execute (Parsing '-w word -sl sl'):
  let cmd = '-w word -sl sl'
  let [argobj,code] = translator#cmdline#parse_args(cmd)
  AssertEqual v:true, code
  AssertEqual 'word', argobj.word
  AssertEqual 'sl', argobj.source_lang
  AssertEqual g:translator_default_engines, argobj.engines
  AssertEqual g:translator_target_lang, argobj.target_lang


Execute (Parsing '-w word -sl sl -tl tl'):
  let cmd = '-w word -sl sl -tl tl'
  let [argobj,code] = translator#cmdline#parse_args(cmd)
  AssertEqual v:true, code
  AssertEqual 'word', argobj.word
  AssertEqual 'sl', argobj.source_lang
  AssertEqual 'tl', argobj.target_lang
  AssertEqual g:translator_default_engines, argobj.engines


Execute (Parsing '-w word -sl sl -tl tl -e engine1 engine2'):
  let cmd = '-w word -sl sl -tl tl -e engine1 engine2'
  let [argobj,code] = translator#cmdline#parse_args(cmd)
  AssertEqual v:true, code
  AssertEqual 'word', argobj.word
  AssertEqual 'sl', argobj.source_lang
  AssertEqual 'tl', argobj.target_lang
  AssertEqual ['engine1', 'engine2'], argobj.engines


Execute (Exit):
  sleep 100m
